version: '3.8'

services:
  # Main API (obecne DDD)
  main-api:
    container_name: ddd_main_api_debug 
    build: 
      context: .
      dockerfile: Dockerfile
      target: debug
    ports:
      - "5000:80"
      - "5003:5003"
    security_opt:
      - seccomp=unconfined     # czasem konieczne dla attach
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80;http://+:5003
      - ConnectionStrings__PostgreSQL=Server=postgres;Database=MainDb;User Id=postgres;Password=YourPassword123!;TrustServerCertificate=true
      - ConnectionStrings__Redis=redis:6379
      - RabbitMQ__HostName=message-broker
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=admin
      - RabbitMQ__Password=admin123
      - RabbitMQ__VirtualHost=/
      - Elasticsearch__Url=http://elasticsearch:9200
      - Elasticsearch__DefaultIndex=ddd-events
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      message-broker:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network

  # Analytics Microservice (.NET 8)
  analytics-api:
    container_name: ddd_analytics_api_debug
    build: 
      context: .
      dockerfile: Analytics/Dockerfile
      target: debug
    security_opt:
      - seccomp=unconfined     # czasem konieczne dla attach
    ports:
      - "5001:80"
      - "5002:5002"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80;http://+:5002
      - ConnectionStrings__MongoDB=mongodb://mongo-analytics:27017/AnalyticsDb
      - MongoDB__ConnectionString=mongodb://mongo-analytics:27017/AnalyticsDb
      - ConnectionStrings__Redis=redis:6379
      - RabbitMQ__HostName=message-broker
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=admin
      - RabbitMQ__Password=admin123
      - RabbitMQ__VirtualHost=/
      - Elasticsearch__Url=http://elasticsearch:9200
      - Elasticsearch__DefaultIndex=analytics-events
    depends_on:
      mongo-analytics:
        condition: service_healthy
      redis:
        condition: service_healthy
      message-broker:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=MainDb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=YourPassword123!
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d MainDb"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # MongoDB Database
  mongo-analytics:
    image: mongo:7
    environment:
      - MONGO_INITDB_DATABASE=AnalyticsDb
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Message Broker (RabbitMQ)
  message-broker:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - app-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - app-network

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - app-network

  # API Gateway 
#  api-gateway:
#    image: nginx:alpine
#    ports:
#      - "80:80"
#    volumes:
#      - ./nginx.conf:/etc/nginx/nginx.conf
#    depends_on:
#      - main-api
#      - analytics-api
#    networks:
#      - app-network

volumes:
  postgres-data:
  mongo-data:
  rabbitmq-data:
  elasticsearch-data:

networks:
  app-network:
    driver: bridge
